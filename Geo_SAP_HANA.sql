CREATE SCHEMA SUPPLY_CHAIN;
SET SCHEMA SUPPLY_CHAIN;
CREATE COLUMN TABLE Warehouses (
    WarehouseID INTEGER PRIMARY KEY,
    Name NVARCHAR(100),
    Latitude DECIMAL(10, 6),
    Longitude DECIMAL(10, 6),
    StockAvailable INTEGER
);
CREATE COLUMN TABLE DemandZones (
    ZoneID INTEGER PRIMARY KEY,
    ZoneName NVARCHAR(100),
    Latitude DECIMAL(10, 6),
    Longitude DECIMAL(10, 6),
    StockNeeded INTEGER
);

CREATE COLUMN TABLE VehicleAvailability (
    VehicleID INTEGER PRIMARY KEY,
    WarehouseID INTEGER,
    MaxCapacity INTEGER,
    FuelCostPerKM DECIMAL(10, 2)
);
CREATE COLUMN TABLE Routes (
    RouteID INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    WarehouseID INTEGER,
    ZoneID INTEGER,
    DistanceKM DECIMAL(10, 2),
    FuelCost DECIMAL(10, 2),
    RouteScore DECIMAL(10, 2) -- lower is better
);


CREATE OR REPLACE PROCEDURE CalculateRoutes()
LANGUAGE SQLSCRIPT
AS
BEGIN
    -- Clear previous results
    DELETE FROM Routes;

    -- Insert new route calculations
    INSERT INTO Routes (WarehouseID, ZoneID, DistanceKM, FuelCost, RouteScore)
    SELECT
        W.WarehouseID,
        Z.ZoneID,
        D.DistanceKM,
        D.FuelCost,
        CASE
            WHEN W.StockAvailable < Z.StockNeeded THEN D.FuelCost + 100
            ELSE D.FuelCost
        END AS RouteScore
    FROM Warehouses W
    JOIN VehicleAvailability V ON W.WarehouseID = V.WarehouseID
    CROSS JOIN DemandZones Z

    -- Inline derived table to calculate distance and fuel cost
    JOIN (
        SELECT 
            W1.WarehouseID AS WID,
            Z1.ZoneID AS ZID,

            -- Calculate distance
            6371 * ACOS(
                LEAST(1, GREATEST(-1,
                    COS(W1.Latitude * 3.14159265358979 / 180) *
                    COS(Z1.Latitude * 3.14159265358979 / 180) *
                    COS((Z1.Longitude - W1.Longitude) * 3.14159265358979 / 180) +
                    SIN(W1.Latitude * 3.14159265358979 / 180) *
                    SIN(Z1.Latitude * 3.14159265358979 / 180)
                ))
            ) AS DistanceKM,

            -- Fuel cost
            6371 * ACOS(
                LEAST(1, GREATEST(-1,
                    COS(W1.Latitude * 3.14159265358979 / 180) *
                    COS(Z1.Latitude * 3.14159265358979 / 180) *
                    COS((Z1.Longitude - W1.Longitude) * 3.14159265358979 / 180) +
                    SIN(W1.Latitude * 3.14159265358979 / 180) *
                    SIN(Z1.Latitude * 3.14159265358979 / 180)
                ))
            ) * V1.FuelCostPerKM AS FuelCost

        FROM Warehouses W1
        JOIN VehicleAvailability V1 ON W1.WarehouseID = V1.WarehouseID
        CROSS JOIN DemandZones Z1
    ) AS D
    ON W.WarehouseID = D.WID AND Z.ZoneID = D.ZID;
END;

SELECT * FROM Routes ORDER BY RouteScore ASC LIMIT 10;
